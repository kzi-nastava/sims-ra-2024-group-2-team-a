using BookingApp.WPF.DTO;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BookingApp.Domain.Model {
    public class TouristReportGenerator : IDocument {
        private DateTime _issueDate;
        private string _generatedBy;
        private TourDTO _tourDetails;
        private List<PassengerDTO> _passengers;
        private List<PointOfInterestDTO> _pointsOfInterest;

        public TouristReportGenerator(DateTime issueDate, string generatedBy, TourDTO tourDetails, List<PassengerDTO> passengers, List<PointOfInterestDTO> pointsOfInterest) {
            _issueDate = issueDate;
            _generatedBy = generatedBy;
            _tourDetails = tourDetails;
            _passengers = passengers;
            _pointsOfInterest = pointsOfInterest;
        }

        public void Compose(IDocumentContainer container) {
            container.Page(page => {
                page.Margin(20);
                page.Size(PageSizes.A4);
                page.PageColor(Colors.White);

                page.Header()
                    .Column(column => {
                        column.Item().Text("Tour reservation report")
                            .FontSize(20)
                            .Bold()
                            .AlignCenter()
                            .BackgroundColor("#D3D3D3");

                        column.Item().Row(row => {
                            row.RelativeItem().Text($"Issue Date: {_issueDate}");
                            row.RelativeItem().Text($"Generated By: {_generatedBy}");
                        });
                    });

                page.Content()
                    .PaddingVertical(10)
                    .Column(column => {
                        column.Spacing(10);

                        // Tour Basic Information
                        column.Item().Text("Tour basic information").Bold().FontSize(14);
                        column.Item().Text($"Name: {_tourDetails.Name}");
                        column.Item().Text($"Description: {_tourDetails.Description}");
                        column.Item().Text($"Language: {_tourDetails.Language.Name}");
                        column.Item().Text($"Location: {_tourDetails.Location.City} - {_tourDetails.Location.Country}");
                        column.Item().Text($"Start Date: {_tourDetails.Beggining.ToShortDateString()}");
                        column.Item().Text($"End Date: {_tourDetails.End.ToShortDateString()}");
                        column.Item().Text($"Duration: {_tourDetails.Duration}");

                        // Tour Checkpoints
                        column.Item().Text("Tour points of interest").Bold().FontSize(14);
                        foreach (var pointOfInterest in _pointsOfInterest) {
                            column.Item().Text($"- {pointOfInterest.Name}");
                        }

                        // List of Guests
                        column.Item().Text("List of passengers").Bold().FontSize(14);
                        column.Item().Table(table => {
                            table.ColumnsDefinition(columns => {
                                columns.RelativeColumn(); // Name
                                columns.RelativeColumn(); // Surname
                                columns.RelativeColumn(); // Age
                            });

                            // Table Header
                            table.Header(header => {
                                header.Cell().Element(CellStyle).Text("Name");
                                header.Cell().Element(CellStyle).Text("Surname");
                                header.Cell().Element(CellStyle).Text("Age");
                            });

                            // Table Rows
                            foreach (var passenger in _passengers) {
                                table.Cell().Element(CellStyle).Text(passenger.Name);
                                table.Cell().Element(CellStyle).Text(passenger.Surname);
                                table.Cell().Element(CellStyle).Text(passenger.Age.ToString());
                            }
                        });
                    });

                page.Footer()
                    .AlignCenter()
                    .Text(x => {
                        x.Span("Page ");
                        x.CurrentPageNumber();
                    });
            });
        }

        private IContainer CellStyle(IContainer container) {
            return container.Padding(5).Border(1).BorderColor(Colors.Grey.Lighten1);
        }
    }
}
