using BookingApp.Domain.Model;
using BookingApp.WPF.DTO;
using BookingApp.WPF.Utils.Reports.Tourist;
using QuestPDF.Fluent;
using QuestPDF.Infrastructure;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using QuestPDF.Helpers;

namespace BookingApp.WPF.Utils.Reports.Guest {
    public class GuestReportGenerator : IDocument {

        private DateTime _issueDate;
        private string _generatedBy;
        private double AverageCleanlinessGrade = 0.0;
        private double AverageBehaviourGrade = 0.0;

        public GuestReportGenerator(string generatedBy, List<AccommodationReviewDTO> reviews) {
            _issueDate = DateTime.Now;
            _generatedBy = generatedBy;

            if (reviews.Count == 0) 
                return;

            AverageCleanlinessGrade = reviews.Average(r => r.GuestCleannessGrade);
            AverageBehaviourGrade = reviews.Average(r => r.RuleFollowingGrade);
        }

        public void Compose(IDocumentContainer container) {
            container.Page(page => {

                page.Margin(50);

                page.Header().Element(ComposeHeader);
                page.Content().Element(ComposeContent);
            });
        }

        void ComposeHeader(IContainer container) {
            var titleStyle = TextStyle.Default.FontSize(20).SemiBold().FontColor(Colors.Green.Darken3);

            container.Row(row => {
                row.RelativeItem().Column(column => {
                    column.Item().Text("Guest rating report").Style(titleStyle);

                    column.Spacing(5);
                    column.Item().Text(text => {
                        text.Span("Issue date: ").SemiBold();
                        text.Span($"{_issueDate:d}");
                    });

                    column.Spacing(5);
                    column.Item().Text(text => {
                        text.Span("Generated by: ").SemiBold();
                        text.Span(_generatedBy);
                    });
                });
            });
        }

        void ComposeContent(IContainer container) {
            container.PaddingVertical(40).Column(column => {
                column.Spacing(5);

                column.Item().PaddingTop(25).Element(ComposeComments);

                column.Spacing(5);

                column.Item().Element(ComposeTable);
            });
        }

        void ComposeComments(IContainer container) {
            container.Background(Colors.Grey.Lighten3).Padding(10).Column(column => {
                column.Spacing(5);
                column.Item().Text("Report Summary").FontSize(14);
                column.Item().Text(_reportSummaryIntro);

                column.Item().Column(pointColumn => {
                    pointColumn.Spacing(15);

                    foreach (var point in _reportSummaryPoints) {
                        pointColumn.Item().Row(row => {
                            row.ConstantItem(10);
                            row.ConstantItem(20).Text("•").FontSize(10);

                            string[] parts = point.Split("/");
                            string ratingType = parts[0];
                            string ratingDesc = parts[1];

                            row.RelativeItem().Stack(stack => {
                                stack.Item().Text(ratingType).Bold();
                                stack.Item().Text(ratingDesc);
                            });
                        });
                    }
                });

                column.Item().Text(_reportSummaryOutro);
            });
        }

        void ComposeTable(IContainer container) {
            container.Table(table => {

                table.ColumnsDefinition(columns => {
                    columns.ConstantColumn(25);
                    columns.RelativeColumn(3);
                    columns.RelativeColumn();
                });


                table.Header(header => {
                    header.Cell().Element(CellStyle).Text("#");
                    header.Cell().Element(CellStyle).Text("Rating type");
                    header.Cell().Element(CellStyle).AlignLeft().Text("Average rating");

                    static IContainer CellStyle(IContainer container) {
                        return container.DefaultTextStyle(x => x.SemiBold()).PaddingVertical(5).BorderBottom(1).BorderColor(Colors.Black);
                    }
                });

                {
                    table.Cell().Element(CellStyle).Text(1);
                    table.Cell().Element(CellStyle).Text("Cleanliness");
                    table.Cell().Element(CellStyle).AlignCenter().Text($"{AverageCleanlinessGrade:F1}");

                    table.Cell().Element(CellStyle).Text(2);
                    table.Cell().Element(CellStyle).Text("Behaviour");
                    table.Cell().Element(CellStyle).AlignCenter().Text($"{AverageBehaviourGrade:F1}");

                    static IContainer CellStyle(IContainer container) {
                        return container.BorderBottom(1).BorderColor(Colors.Grey.Lighten2).PaddingVertical(5);
                    }
                }
            });
        }

        public DocumentMetadata GetMetadata() => DocumentMetadata.Default;

        private readonly string _reportSummaryIntro = @"
            This report provides a comprehensive evaluation of the guest's stay based on feedback received from accommodation owners. It includes two key metrics:";

        private readonly string[] _reportSummaryPoints = new[] {
            "Cleanliness Grade :/ This rating reflects the guest's adherence to cleanliness standards.",
            "Behaviour Grade :/ This rating evaluates the guest's overall behavior and conduct during their stay."
        };

        private readonly string _reportSummaryOutro = @"
            These metrics are calculated as averages from multiple reviews to offer an objective overview of the guest's habits and reliability. This report aims to help both guests and hosts maintain high standards and ensure positive experiences in future stays.";

    }
}
